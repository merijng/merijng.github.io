<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Merijn Geurts</title><link>https://merijng.github.io/en/posts/</link><description>Recent content in Posts on Merijn Geurts</description><generator>Hugo -- gohugo.io</generator><language>nl-NL</language><copyright>Merijn Geurts</copyright><lastBuildDate>Sun, 03 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://merijng.github.io/en/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Free 'Spotify Premium' Alternative with Brave and YouTube Music</title><link>https://merijng.github.io/en/posts/free-spotify-premium-alternative/</link><pubDate>Sun, 03 Aug 2025 00:00:00 +0000</pubDate><guid>https://merijng.github.io/en/posts/free-spotify-premium-alternative/</guid><description>Tired of the monthly fees for music streaming services like Spotify Premium, but still want to listen to your favorite songs without interruptions? There&amp;rsquo;s a smart and completely legal way to get a similar premium experience, and it&amp;rsquo;s entirely free. All you need is the Brave browser and a YouTube account.
In this guide, we&amp;rsquo;ll explain how you can use this combination to enjoy YouTube Music without annoying ads.
Why This Method Works: The Power of Brave The secret behind this method is the Brave browser.</description><content>&lt;p>Tired of the monthly fees for music streaming services like Spotify Premium, but still want to listen to your favorite songs without interruptions? There&amp;rsquo;s a smart and completely legal way to get a similar premium experience, and it&amp;rsquo;s entirely free. All you need is the Brave browser and a YouTube account.&lt;/p>
&lt;p>In this guide, we&amp;rsquo;ll explain how you can use this combination to enjoy YouTube Music without annoying ads.&lt;/p>
&lt;h2 id="why-this-method-works-the-power-of-brave">Why This Method Works: The Power of Brave&lt;/h2>
&lt;p>The secret behind this method is the &lt;strong>Brave browser&lt;/strong>. Brave is a web browser built with a focus on privacy and security. One of its key features is the built-in ad and tracker blocker, called &lt;strong>Brave Shields&lt;/strong>.&lt;/p>
&lt;p>This blocker does exactly what its name suggests: it automatically blocks ads and trackers on the websites you visit. This also applies to the audio and video ads on YouTube and YouTube Music.&lt;/p>
&lt;h2 id="step-by-step-guide-listen-to-music-for-free-in-4-steps">Step-by-Step Guide: Listen to Music for Free in 4 Steps&lt;/h2>
&lt;p>Setting it up is surprisingly simple and only takes a few minutes.&lt;/p>
&lt;h3 id="step-1-install-the-brave-browser">Step 1: Install the Brave Browser&lt;/h3>
&lt;p>If you&amp;rsquo;re not already using Brave, now is the time to start.&lt;/p>
&lt;ol>
&lt;li>Go to the official website: &lt;a href="https://brave.com">brave.com&lt;/a>&lt;/li>
&lt;li>Download and install the browser for your operating system (Windows, macOS, Linux).&lt;/li>
&lt;/ol>
&lt;p>Brave works just like Chrome or Firefox, so switching is easy. You can even import your bookmarks and extensions.&lt;/p>
&lt;h3 id="step-2-go-to-youtube-music">Step 2: Go to YouTube Music&lt;/h3>
&lt;p>Open the newly installed Brave browser and navigate to YouTube Music.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Website:&lt;/strong> &lt;a href="https://music.youtube.com">music.youtube.com&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Log in with your standard Google or YouTube account. You don&amp;rsquo;t need a special subscription.&lt;/p>
&lt;h3 id="step-3-optional-add-to-your-home-screen">Step 3 (Optional): Add to Your Home Screen&lt;/h3>
&lt;p>For an app-like experience, you can place a shortcut to YouTube Music on your device. This makes opening it as easy as a regular app.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>On desktop:&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Click the icon on the right side of the address bar (usually a screen with an arrow).&lt;/li>
&lt;li>Confirm the installation. YouTube Music will now appear as an app in its own window.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>On Android:&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Tap the menu icon (three dots).&lt;/li>
&lt;li>Select &lt;strong>&amp;ldquo;Install app&amp;rdquo;&lt;/strong> or &lt;strong>&amp;ldquo;Add to Home screen&amp;rdquo;&lt;/strong>.&lt;/li>
&lt;li>Confirm the installation. The shortcut will now appear on your home screen.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="step-4-enjoy-uninterrupted-music">Step 4: Enjoy Uninterrupted Music&lt;/h3>
&lt;p>That&amp;rsquo;s it! Find your favorite artists, albums, or playlists and start listening. You&amp;rsquo;ll notice that the ads that normally play between songs are completely gone. Brave Shields blocks them in the background, giving you a seamless listening experience.&lt;/p>
&lt;h2 id="advantages-of-this-approach">Advantages of This Approach&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Completely free:&lt;/strong> No monthly subscription fees.&lt;/li>
&lt;li>&lt;strong>No ads:&lt;/strong> Enjoy music without interruptions.&lt;/li>
&lt;li>&lt;strong>Huge music library:&lt;/strong> Access to the gigantic catalog of YouTube Music.&lt;/li>
&lt;li>&lt;strong>Enhanced privacy:&lt;/strong> Brave not only blocks ads but also online trackers that monitor your browsing behavior.&lt;/li>
&lt;li>&lt;strong>Works on desktop and mobile:&lt;/strong> This method works great on your computer and also in the mobile Brave app for Android.&lt;/li>
&lt;/ul>
&lt;h2 id="are-there-any-downsides">Are There Any Downsides?&lt;/h2>
&lt;p>While this is a fantastic alternative, there are a few Spotify Premium features you&amp;rsquo;ll miss:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Offline downloads:&lt;/strong> You can&amp;rsquo;t download music for offline use without a YouTube Premium subscription.&lt;/li>
&lt;li>&lt;strong>Audio quality:&lt;/strong> The default audio quality on YouTube Music is good, but audiophiles might prefer the higher bitrate options of paid services.&lt;/li>
&lt;li>&lt;strong>Limited background playback on iOS:&lt;/strong> As mentioned, on an iPhone or iPad, the music stops if you leave the Brave app or lock the screen. This is a limitation of Apple&amp;rsquo;s operating system, not Brave. Background playback does work on Android.&lt;/li>
&lt;/ul>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>For anyone who primarily listens to music on a computer or Android phone and doesn&amp;rsquo;t need offline downloads, the combination of Brave and YouTube Music is the perfect free alternative to Spotify Premium. You&amp;rsquo;ll save money, protect your privacy, and enjoy an uninterrupted stream of your favorite music. Try it for yourself!&lt;/p></content></item><item><title>Substrings vs. Spans: Efficient String Handling in C#</title><link>https://merijng.github.io/en/posts/substring-vs-spans-efficient-string-handling-in-csharp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://merijng.github.io/en/posts/substring-vs-spans-efficient-string-handling-in-csharp/</guid><description>If you’re working with strings in C#, you’ve probably encountered the need to extract substrings or manipulate portions of a string. Traditionally, you would use the Substring method to extract a portion of a string, but there&amp;rsquo;s a newer alternative called &amp;ldquo;spans&amp;rdquo; that you might want to consider.
In this article, we’ll take a look at the differences between substrings and spans in C#, and discuss how you can use each approach efficiently to handle strings in your code.</description><content>&lt;p>If you’re working with strings in C#, you’ve probably encountered the need to extract substrings or manipulate portions of a string. Traditionally, you would use the Substring method to extract a portion of a string, but there&amp;rsquo;s a newer alternative called &amp;ldquo;spans&amp;rdquo; that you might want to consider.&lt;/p>
&lt;p>In this article, we’ll take a look at the differences between substrings and spans in C#, and discuss how you can use each approach efficiently to handle strings in your code.&lt;/p>
&lt;h2 id="what-are-substrings">What are Substrings?&lt;/h2>
&lt;p>A substring is a portion of a string that you extract using the Substring method in C#.&lt;/p>
&lt;p>Here’s an example of how you would extract a substring from a string in C#:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> originalString = &lt;span style="color:#e6db74">&amp;#34;The quick brown fox jumps over the lazy dog&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> substring = originalString.Substring(&lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>); &lt;span style="color:#75715e">// == quick&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, we’re extracting a substring starting at index 4 and with a length of 5 characters. The resulting substring variable will contain the text &amp;ldquo;quick&amp;rdquo;.&lt;/p>
&lt;h2 id="what-are-spans">What are Spans?&lt;/h2>
&lt;p>Spans are a newer alternative to substrings in C#. They provide a more efficient way to manipulate strings.&lt;/p>
&lt;p>A span is essentially a “view” of a portion of a larger array or string, without actually creating a new instance of that portion. This means that you can manipulate the data in the span without affecting the original data.&lt;/p>
&lt;p>Here’s an example of how you would create a span in C#:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> originalString = &lt;span style="color:#e6db74">&amp;#34;The quick brown fox jumps over the lazy dog&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ReadOnlySpan&amp;lt;&lt;span style="color:#66d9ef">char&lt;/span>&amp;gt; span = originalString.AsSpan(&lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>); &lt;span style="color:#75715e">// == quick&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, we’re creating a read-only span that starts at index 4 and has a length of 5 characters. The resulting span variable will contain the same text (quick) as the substring variable from the previous example.&lt;/p>
&lt;h2 id="benefit-of-using-spans">Benefit of Using Spans&lt;/h2>
&lt;p>Because spans are essentially “views” of a portion of a larger array or string, they don’t create new instances of that data. This means that using spans can be much more efficient than using substrings, especially when dealing with large strings.&lt;/p>
&lt;h2 id="when-to-use-substrings-vs-spans">When to Use Substrings vs. Spans&lt;/h2>
&lt;p>While spans are generally more efficient than substrings, there are still some cases where substrings might be more appropriate. For example, if you’re working with a small string or only need to extract a single substring, the performance benefits of using spans might not be significant enough to justify the additional complexity.&lt;/p>
&lt;h2 id="real-world-example-comparison">Real world example comparison&lt;/h2>
&lt;p>I’ve created an example benchmark console application, which you can run for your own knowledge. Below you can see an example result of the benchmark.&lt;/p>
&lt;p>&lt;img src="substrings-are-fast.webp" alt="Substrings are fast">&lt;/p>
&lt;p>You can see is that the ReplaceSpan method is roughly 40% faster. Moreover, the allocated memory is more than 50 percent less.&lt;/p></content></item></channel></rss>